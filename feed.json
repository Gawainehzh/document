{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "磨铁图书",
    "icon": "https://gawainehzh.github.io/document/images/favicon.ico",
    "description": "前端摆烂王",
    "home_page_url": "https://gawainehzh.github.io/document",
    "items": [
        {
            "id": "https://gawainehzh.github.io/document/%E5%8D%9A%E5%AE%A2%E5%9B%AD/",
            "url": "https://gawainehzh.github.io/document/%E5%8D%9A%E5%AE%A2%E5%9B%AD/",
            "title": "Gawaine的园子",
            "date_published": "2022-05-09T15:58:34.213Z",
            "content_html": "<p><div class=\"links\"><div class=\"item\" title=\"Gawaine\" style=\"--block-color:#e29010;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vR2F3YWluZWh6aC8=\" data-background-image=\"https://blog-static.cnblogs.com/files/blogs/736936/favicon.ico?t=1646316287\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vR2F3YWluZWh6aC8=\">Gawaine</span>\n          <p class=\"desc\">大脸猫的编程笔记</p>\n          </div></div></div></p>\n",
            "tags": []
        },
        {
            "id": "https://gawainehzh.github.io/document/html/html%E6%A0%87%E7%AD%BE/",
            "url": "https://gawainehzh.github.io/document/html/html%E6%A0%87%E7%AD%BE/",
            "title": "html-01",
            "date_published": "2022-05-07T13:50:09.717Z",
            "content_html": "<h1 id=\"day01-html标签\"><a class=\"anchor\" href=\"#day01-html标签\">#</a> day01-HTML 标签</h1>\n<h2 id=\"一-学习目标\"><a class=\"anchor\" href=\"#一-学习目标\">#</a> 一、学习目标</h2>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> 能够说出什么是 HTML</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\"><label for=\"cbx_1\"> 能够说出 Web 标准组成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\"><label for=\"cbx_2\"> 能够写出 HTML 的基本格式</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> 能够写出 3 到 4 个常用的双标签</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\"><label for=\"cbx_4\"> 能够说出相对路径的三种形式</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> 能够写出图片标签以及 alt 和 title 区别</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> 能够写出超链接基本语法</label></li>\n</ul>\n<h2 id=\"二-认识前端\"><a class=\"anchor\" href=\"#二-认识前端\">#</a> 二、认识前端</h2>\n<h4 id=\"阶段一课程内容分布\"><a class=\"anchor\" href=\"#阶段一课程内容分布\">#</a> 阶段一课程内容分布</h4>\n<p>html</p>\n<h2 id=\"三-认识网页\"><a class=\"anchor\" href=\"#三-认识网页\">#</a> 三、认识网页</h2>\n<h3 id=\"网页组成\"><a class=\"anchor\" href=\"#网页组成\">#</a> 网页组成</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>网页是由: 文字,图片,输入框,按钮,视频,音频....元素组成的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>总结:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t 网页就是由HTML组成的</pre></td></tr></table></figure><h3 id=\"网页规范万维网联盟w3c\"><a class=\"anchor\" href=\"#网页规范万维网联盟w3c\">#</a> 网页规范 (万维网联盟 W3C)</h3>\n<p>web 网页要遵循的标准，也可以说是我们写前端代码的一个基本语法准则</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 结构标准:  制作网页必须按照HTMl的标准结构去写网页</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ☞ 表现标准:  用来美化网页CSS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ☞ 行为标准:  用来实现网页中的用户的一些动作处理 JavaScript</pre></td></tr></table></figure><h2 id=\"四-浏览器介绍\"><a class=\"anchor\" href=\"#四-浏览器介绍\">#</a> 四、浏览器介绍</h2>\n<h3 id=\"主流浏览器\"><a class=\"anchor\" href=\"#主流浏览器\">#</a> 主流浏览器</h3>\n<p><img data-src=\"1524621769000.png\" alt=\"52462176900\"></p>\n<p><img data-src=\"1524621807789.png\" alt=\"52462180778\"></p>\n<p><img data-src=\"browser.png\" alt></p>\n<p>查看网站：<span class=\"exturl\" data-url=\"aHR0cDovL3RvbmdqaS5iYWlkdS5jb20vZGF0YS9icm93c2Vy\">http://tongji.baidu.com/data/browser</span></p>\n<h3 id=\"内核渲染引擎\"><a class=\"anchor\" href=\"#内核渲染引擎\">#</a> 内核（渲染引擎）</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Trident(IE内核)： </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tIE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Gecko(firefox)：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     Gecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>webkit(Safari):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tSafari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Blink：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t大部分国产浏览器最新版都采用Blink内核。二次开发。谷歌浏览器。Blink 其实是 WebKit 的分支。 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Presto(Opera) ：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t  Presto（已经废弃） 是挪威产浏览器 opera 的 \"前任\" 内核，为何说是 \"前任\"，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。</pre></td></tr></table></figure><h2 id=\"五-为什么要遵循web标准呢\"><a class=\"anchor\" href=\"#五-为什么要遵循web标准呢\">#</a> 五、为什么要遵循 WEB 标准呢？</h2>\n<p>通过以上浏览器的内核不同，我们知道他们渲染或者排版的模式就有些许差异，显示就会有差别。导致用户在不同的浏览器看到同一个页面是不同的效果。</p>\n<p><img data-src=\"image-20200602083640908.png\" alt=\"image-20200602083640908\"></p>\n<h2 id=\"六-web-标准构成\"><a class=\"anchor\" href=\"#六-web-标准构成\">#</a> 六、Web 标准构成</h2>\n<p><strong>构成：</strong> 主要包括结构（Structure）HTML、表现（Presentation）CSS 和行为（Behavior）js 三个方面。</p>\n<p><img data-src=\"image-20200602083716829.png\" alt=\"image-20200602083716829\"></p>\n<ul>\n<li>\n<p>结构标准：结构用于对网页元素进行整理和分类，咱们主要学的是 HTML。 对于网页来说最重要的一部分</p>\n</li>\n<li>\n<p>表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是 CSS</p>\n</li>\n<li>\n<p>行为标准：行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript   js</p>\n</li>\n<li>\n<p>重要的原则：页面三层分离 (HTML,css，js 书写的时候分开来写)</p>\n</li>\n</ul>\n<p>理想状态我们的源码： .HTML      .css      .js</p>\n<h2 id=\"七-html重点\"><a class=\"anchor\" href=\"#七-html重点\">#</a> 七、HTML (重点)</h2>\n<h3 id=\"71-概念\"><a class=\"anchor\" href=\"#71-概念\">#</a> 7.1 概念</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ HTML：  Hyper   Text  Markup  Language.[  超文本标记语言 ]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   超文本: 本质就是一个文本[在网页中,用来实现页面跳转的文本  ---超链接标签]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   标记: 记号. [各种HTML标签]    标签</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>HTML的学习其实就是学些大量的标签</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>标签学习：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>1.标签长什么样子</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2.作用</pre></td></tr></table></figure><h4 id=\"711标签的语法\"><a class=\"anchor\" href=\"#711标签的语法\">#</a> 7.1.1 标签的语法</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>标签： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>标签名</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>标签语法2： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span><span class=\"token punctuation\">></span></span>  或者 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h3 id=\"72-结构\"><a class=\"anchor\" href=\"#72-结构\">#</a> 7.2 结构</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>注意:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t1. 我们在以后写代码(html,css,js...)遇到特殊符号,必须都是英文输入下的符号.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t2. 制作一个网页必须按照html的结构去写.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span>  <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"73-编辑器\"><a class=\"anchor\" href=\"#73-编辑器\">#</a> 7.3 编辑器</h3>\n<p>常见的前端使用的编辑器</p>\n<p><img data-src=\"image-20201126155410668.png\" alt=\"image-20201126155410668\"></p>\n<p>其实真正的高手和手上的工具是没有关系的。如：</p>\n<p><img data-src=\"image-20201126155443619.png\" alt=\"image-20201126155443619\"></p>\n<h4 id=\"731-编辑器的几个插件\"><a class=\"anchor\" href=\"#731-编辑器的几个插件\">#</a> 7.3.1 编辑器的几个插件</h4>\n<ol>\n<li>\n<p>Chinese (Simplified) Language Pack for<img data-src=\"image-20200602084725806.png\" alt=\"image-20200602084725806\"></p>\n</li>\n<li>\n<p>Auto Rename Tag（自动重命名标签）<img data-src=\"image-20200602084715163.png\" alt=\"image-20200602084715163\"></p>\n</li>\n<li>\n<p>AutoFileName（自动补全文件名）</p>\n<p><img data-src=\"image-20201126160020103.png\" alt=\"image-20201126160020103\"></p>\n</li>\n<li>\n<p>open in browser（浏览器打开） <img data-src=\"image-20200602084752540.png\" alt=\"image-20200602084752540\"></p>\n</li>\n<li>\n<p>vscode-icons</p>\n</li>\n</ol>\n<p><img data-src=\"image-20201126160706358.png\" alt=\"image-20201126160706358\"></p>\n<h4 id=\"732-编辑器的使用\"><a class=\"anchor\" href=\"#732-编辑器的使用\">#</a> 7.3.2 编辑器的使用</h4>\n<ol>\n<li>使用 vscode 打开练习文件夹的方式</li>\n</ol>\n<ul>\n<li>\n<p>在菜单栏中，文件 --》打开文件夹</p>\n</li>\n<li>\n<p>打开 vscode 编辑器后，用鼠标按住想要打开的文件夹，直接拖拽到 vscode 窗口</p>\n</li>\n<li>\n<p>鼠标选中想要打开的文件夹，点击鼠标右键，选中通 code 打开</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>快速生成 HTML 基本结构</p>\n<ol>\n<li>\n<p>新建一个 html 后缀的文件</p>\n</li>\n<li>\n<p>!+tab (按下键盘的 tab 键)    确认输入的是英文状态下的！</p>\n</li>\n</ol>\n</li>\n<li>\n<p>快速补充完整标签：</p>\n<ol>\n<li>标签名 + tab</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"74-一些文件夹习惯的说明\"><a class=\"anchor\" href=\"#74-一些文件夹习惯的说明\">#</a> 7.4 一些文件夹习惯的说明</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>建议：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>大家在学习的过程中，也养成整理文件的习惯，每日都有一个对应的练习练习文件夹，不要把所有的东西都丢在桌面上</pre></td></tr></table></figure><h4 id=\"742-文件后缀名\"><a class=\"anchor\" href=\"#742-文件后缀名\">#</a> 7.4.2 文件后缀名</h4>\n<p><strong>win7 系统 文件后缀名显示</strong></p>\n<p><img data-src=\"image-20201126171454015.png\" alt=\"image-20201126171454015\"></p>\n<p><strong>win10 系统  文件后缀名显示</strong></p>\n<p><img data-src=\"image-20201126171555302.png\" alt=\"image-20201126171555302\"></p>\n<h3 id=\"75-文档类型与字符集\"><a class=\"anchor\" href=\"#75-文档类型与字符集\">#</a> 7.5 文档类型与字符集</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"76-doctype-html的作用\"><a class=\"anchor\" href=\"#76-doctype-html的作用\">#</a> 7.6  <code>&lt;!DOCTYPE html&gt;</code>  的作用</h3>\n<p>这句话就是告诉我们使用哪个 html 版本？  我们使用的是 html 5 的版本。  html 有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!DOCTYPE</span><span class=\"token punctuation\">></span></span> 标签位于文档的最前面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!DOCTYPE</span><span class=\"token punctuation\">></span></span>标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>注意：  一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</pre></td></tr></table></figure><p>html5 以前的文档类型：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.XHTML1.1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t语法：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD XHTML 1.1//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2.XHTML 1.0 Frameset</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t语法：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD XHTML 1.0 Frameset//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3.XHTML 1.0 Transitional</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t语法：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD XHTML 1.0 Transitional//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>4.XHTML 1.0 Strict</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t语法：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD XHTML 1.0 Strict//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>5.HTML 4.01 Frameset</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t语法：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>6.HTML 4.01 Strict</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t语法：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>7.HTML 5</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t语法：<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"doctype的作用\"><a class=\"anchor\" href=\"#doctype的作用\">#</a> DOCTYPE 的作用</h4>\n<p>声明文档的解析类型 (document.compatMode)，避免浏览器的怪异模式。</p>\n<h4 id=\"documentcompatmode\"><a class=\"anchor\" href=\"#documentcompatmode\">#</a> document.compatMode：</h4>\n<ul>\n<li>\n<p>BackCompat：怪异模式，浏览器使用自己的怪异模式解析渲染页面。</p>\n</li>\n<li>\n<p>CSS1Compat：标准模式，浏览器使用 W3C 的标准解析渲染页面。</p>\n</li>\n</ul>\n<p>这个属性会被浏览器识别并使用，但是如果你的页面没有 DOCTYPE 的声明，那么 compatMode 默认就是 BackCompat。</p>\n<h3 id=\"77-字符集\"><a class=\"anchor\" href=\"#77-字符集\">#</a> 7.7 字符集</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>utf-8 是目前最常用的字符集编码方式，常用的字符集编码方式还有 gbk 和 gb2312。</p>\n<p>gb2312 简单中文  包括 6763 个汉字 --- 汉语</p>\n<p>BIG5   繁体中文 港澳台等用</p>\n<p>GBK 包含全部中文字符    是 GB2312 的扩展，加入对繁体字的支持，兼容 GB2312</p>\n<p>UTF-8 则包含全世界所有国家需要用到的字符 --- 相当于英文</p>\n<pre><code>记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。\n</code></pre>\n<h3 id=\"78-结构详解\"><a class=\"anchor\" href=\"#78-结构详解\">#</a> 7.8 结构详解</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span>  <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>     -----> 用来告诉浏览器文档类型, 该标签最好不要去掉.如果将该标签去掉之后,浏览器会出现一只怪异模式[浏览器不确定到底按照哪种渲染方式去渲染显示网页]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>   -----> 根标签</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>   ----- 设置网页中基本的配置内容(网页的标题,网页中的样式,网页中的js代码效果....)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span> ----> 设置网页标题</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>  ---> 代表的是网页主体[在网页中除去地址栏看到的任何信息都要放到body标签中]</pre></td></tr></table></figure><h3 id=\"79-标签之间的关系\"><a class=\"anchor\" href=\"#79-标签之间的关系\">#</a> 7.9 标签之间的关系</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 嵌套关系:  一个标签包含其他标签 [父元素和子元素]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>☞ 并列关系:  标签之间不存在嵌套包含</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  例如:  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>  和 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>嵌套关系：</p>\n<p><img data-src=\"image-20200602083755026.png\" alt=\"image-20200602083755026\"></p>\n<p>并列关系：</p>\n<p><img data-src=\"image-20200602083815773.png\" alt=\"image-20200602083815773\"></p>\n<h3 id=\"710-标签写法分类\"><a class=\"anchor\" href=\"#710-标签写法分类\">#</a> 7.10 标签写法分类</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 双标签: 有开始和结束的标签.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  总结:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  1. 如果页面中出现嵌套关系,父元素一定是双标签,子元素可以是双标签或者单标签</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>☞ 单标签: 只有开始没有结束</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  总结:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t  1. 单独标签一定不能作为父元素.</pre></td></tr></table></figure><h4 id=\"单标签\"><a class=\"anchor\" href=\"#单标签\">#</a> 单标签</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 换行标签:  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>☞ 横线:  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>☞ 文档类型:  <span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span>  <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>☞ 注释标签: <span class=\"token comment\">&lt;!-- 内容 --></span>     ctrl + /</pre></td></tr></table></figure><h4 id=\"双标签\"><a class=\"anchor\" href=\"#双标签\">#</a> 双标签</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 双标签：  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"711-常用标签\"><a class=\"anchor\" href=\"#711-常用标签\">#</a> 7.11 常用标签</h3>\n<h4 id=\"h-标题标签\"><a class=\"anchor\" href=\"#h-标题标签\">#</a> h - 标题标签</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用来设置页面中的内容标题：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>  -  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h6</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h6</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t特点：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t1.数字越大，标题标签中的默认字体越小，重要性也越小，h1重要性最高</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t2.一个页面一般只有一个h1标签，给logo使用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t3.独占一行</pre></td></tr></table></figure><h4 id=\"p-段落标签\"><a class=\"anchor\" href=\"#p-段落标签\">#</a> p - 段落标签</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用来表示文章段落或者一段文本： <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t特点：独占一行</pre></td></tr></table></figure><h4 id=\"br-换行标签熟记\"><a class=\"anchor\" href=\"#br-换行标签熟记\">#</a> br - 换行标签 (熟记)</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>单词缩写：  break   打断 ,换行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这时如果还像在 word 中直接敲回车键换行就不起作用了。</p>\n<h4 id=\"hr-水平线标签认识\"><a class=\"anchor\" href=\"#hr-水平线标签认识\">#</a> hr - 水平线标签 (认识)</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>单词缩写：  horizontal  横线</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">></span></span>就是创建横跨网页水平线的标签。其基本语法格式如下：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">></span></span>是单标签</pre></td></tr></table></figure><p>在网页中显示默认样式的水平线。</p>\n<h4 id=\"格式化修饰标签双标签\"><a class=\"anchor\" href=\"#格式化修饰标签双标签\">#</a> 格式化（修饰）标签 [双标签]</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 设置文字颜色或者设置文字大小:  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t1. 改变文字颜色需要添加color属性   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是红颜色的文字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    2.  改变文字大小需要添加size属性    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>font</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>orange<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>7<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是红颜色的文字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>font</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>☞ 设置文字是否加粗:  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span> 或者 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>☞ 设置文字斜体显示: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span> 或者  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>☞ 设置文字删除线效果: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>del</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>del</span><span class=\"token punctuation\">></span></span>  或者  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>s</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>☞ 设置文字下划线效果: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ins</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ins</span><span class=\"token punctuation\">></span></span>   或者  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"div-span标签重点\"><a class=\"anchor\" href=\"#div-span标签重点\">#</a> div span 标签 (重点)</h4>\n<p>div  span    是没有语义的     是我们网页布局主要的 2 个盒子</p>\n<p>div 就是  division  的缩写   分割， 分区的意思  其实有很多 div 来组合网页。</p>\n<p>span, 跨度，跨距；范围</p>\n<p>语法格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span> 这是头部 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>今日价格<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"img-图片标签多媒体标签-重点\"><a class=\"anchor\" href=\"#img-图片标签多媒体标签-重点\">#</a> img - 图片标签【多媒体标签 - 重点】</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 图片标签: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>☞ 属性:  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tsrc:设置要显示的图片路径     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\twidth: 设置标签宽度.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\theight: 设置标签高度.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t    title:  鼠标悬停到图片上的文字提示.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\talt:   当图片无法正常显示时候的文字提示.</pre></td></tr></table></figure><h4 id=\"a-超链接重点\"><a class=\"anchor\" href=\"#a-超链接重点\">#</a> a - 超链接【重点】</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>本质: 就是用来实现页面跳转.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span>  <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>目标页面路径<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>属性:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ttarget:设置目标页面打开方式(默认在当前页面中打开_self | _blank 新窗口中打开)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>总结:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t如果希望当前页面中所有超链接跳转页面的时候,都在新窗口中打开,那么只需要在head标签中设置 base标签,给base标签设置target属性即可.</pre></td></tr></table></figure><h4 id=\"锚链接\"><a class=\"anchor\" href=\"#锚链接\">#</a> 锚链接</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>本质: 在当前页面中跳转. 网页中的返回顶部效果</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\"#\": 返回当前页面开始位置</pre></td></tr></table></figure><h3 id=\"712-路径重点\"><a class=\"anchor\" href=\"#712-路径重点\">#</a> 7.12 路径（重点）</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>☞ 绝对路径:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t 1. 如果路径中包含具体的磁盘目录:   d:/img/1.jpg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t 2. 如果路径中具有具体的网址:    www.baidu.com/img/1.jpg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> ☞ 相对路径: 必须在同一个根目录下.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t1. 如果当前页面和被访问的资源在同一个文件夹中,路径=直接设置文件名称</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    2. 如果当前页面在被访问资源的下一级目录中, 路径=文件所在的文件夹名称/文件名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    3. 如果当前页面在被访问资源的上一级目录中,路径=../文件名称</pre></td></tr></table></figure><h2 id=\"八-特殊字符了解\"><a class=\"anchor\" href=\"#八-特殊字符了解\">#</a> 八、特殊字符（了解）</h2>\n<p><img data-src=\"1533254344261.png\" alt=\"1533254344261\"></p>\n",
            "tags": [
                "html",
                "html"
            ]
        },
        {
            "id": "https://gawainehzh.github.io/document/Vue3/Vue3%E7%AC%94%E8%AE%B0/",
            "url": "https://gawainehzh.github.io/document/Vue3/Vue3%E7%AC%94%E8%AE%B0/",
            "title": "Vue3",
            "date_published": "2022-04-28T02:45:19.072Z",
            "content_html": "<h1 id=\"vue2-vue3\"><a class=\"anchor\" href=\"#vue2-vue3\">#</a> Vue2-&gt;Vue3</h1>\n<p>如果有 Vue2 的基础，并在此基础上学习 Vue3，并不需要把完整的官网看完，我们只需要关注一些新功能和非兼容的变化即可进行开发。</p>\n<h2 id=\"vue3变化\"><a class=\"anchor\" href=\"#vue3变化\">#</a> Vue3 变化</h2>\n<ul>\n<li>同一元素上使用的 <code>v-if</code>  和 <code>v-for</code>  优先级已更改，但<strong>不推荐</strong>同时使用  <code>v-if</code>  和  <code>v-for</code> 。</li>\n<li>组件事件需要在 <code>emits</code>  选项中声明</li>\n<li><code>destroyed</code>  生命周期选项被重命名为  <code>unmounted</code></li>\n<li><code>beforeDestroy</code>  生命周期选项被重命名为  <code>beforeUnmount</code></li>\n<li>自定义指令的 API 已更改为与组件生命周期一致</li>\n<li>新增了三个组件： <code>Fragment</code>  支持多个根节点、 <code>Suspense</code>  可以在组件渲染之前的等待时间显示指定内容、 <code>Teleport</code>  可以让子组件能够在视觉上跳出父组件 (如父组件 overflow:hidden)</li>\n<li>新增指令  <code>v-memo</code> ，可以缓存 html 模板，比如 v-for 列表不会变化的就缓存，简单说就是用内存换时间。</li>\n<li>用  <code>Proxy</code>  代替 Object.defineProperty 重构了响应式系统，可以监听到数组下标变化，及对象新增属性，因为监听的不是对象属性，而是对象本身，还可拦截 apply、has 等 13 种方法</li>\n<li>重构了虚拟 DOM，在编译时会将事件缓存、将 slot 编译为 lazy 函数、保存静态节点直接复用 (静态提升)、以及添加静态标记、Diff 算法使用 最长递增子序列 优化了对比流程，使得虚拟 DOM 生成速度提升  <code>200%</code></li>\n<li>支持在  <code>&lt;style&gt;&lt;/style&gt;</code>  里使用  <code>v-bind</code> ，给 CSS 绑定 JS 变量 ( <code>color: v-bind(str)</code> )</li>\n<li>新增  <code>Composition API</code>  可以更好的逻辑复用和代码组织，同一功能的代码不至于像以前一样太分散，虽然 Vue2 中可以用 minxin 来实现复用代码，但也存在问题，比如方法或属性名会冲突，代码来源也不清楚等</li>\n<li>全局函数  <code>set</code>  和  <code>delete</code>  以及实例方法  <code>$set</code>  和  <code>$delete</code>  移除。基于代理的变化检测已经不再需要它们了</li>\n<li>毕竟 Vue3 是用  <code>TS</code>  写的，所以对  <code>TS</code>  的支持度更好</li>\n<li>Vue3 不兼容  <code>IE11</code></li>\n<li><code>$on</code> ， <code>$off</code>  和  <code>$once</code>  实例方法已被移除，组件实例不再实现事件触发接口。</li>\n</ul>\n<h2 id=\"三-组合式api\"><a class=\"anchor\" href=\"#三-组合式api\">#</a> 三、组合式 API</h2>\n<p>原有的组件选项 ( <code>data</code> 、 <code>computed</code> 、 <code>methods</code> 、 <code>watch</code> ) 的方式来组织组件代码通常是非常有效的，但是也存在一些不好的地方，例如把原有的关联逻辑按照选项划分开来，掩盖了原有潜在的逻辑问题，这个时候我们就必须要不断地上下滚动代码来找到响应的代码块来查找，这样带来了极大的不便，特别是一开始没有编写过这组件的人来说，这导致组件难以阅读和理解。</p>\n<p>所以针对上述的情况，Vue3 提出了新的组织组件代码的方式 --- 组合式 API。组合式 API 需要一个可以实际使用的地方，那就是 <code>setup</code> 。</p>\n<p><code>setup</code>  的触发时机是在组件创建之前执行的。需要注意，在 <code>setup</code>  中你应该避免使用 <code>this</code> ，因为这个时候 <code>this</code>  并不代表组件实例。 <code>setup</code>  的调用发生在 <code>data</code> 、 <code>computed</code>  和 <code>methods</code>  被解析之前，所以它们没法在 <code>setup</code>  中被获取。</p>\n<p>当然，我们依然可以在 Vue3 使用选项（Option API）的方式来组织代码，这个和 Vue2 没有区别，但是不建议这样写。</p>\n<p><strong>Vue3.x 组件的选项（Option API）写法 (不建议)</strong></p>\n<pre><code class=\"language-vue\">&lt;script&gt;\n\timport &#123; defineComponent, ref &#125; from 'vue';\n  export default defineComponent(&#123;\n    setup() &#123;&#125;,\n    mounted() &#123;\n      console.log('生命周期mounted')\n    &#125;,\n    components: &#123;&#125;,\n    methods: &#123;&#125;,\n    watch: &#123;&#125;,\n    comuted: &#123;&#125;\n  &#125;);\n&lt;/script&gt;\n</code></pre>\n<p><strong>Vue3.x 组合式写法（推荐）</strong></p>\n<pre><code class=\"language-vue\">&lt;script&gt;\n\timport &#123; defineComponent, ref, onMounted &#125; from 'vue';\n  export default defineComponent(&#123;\n    setup()&#123;\n      let num = ref(0);\n      let fn = () =&gt; &#123;&#125;;\n      onMounted(():void =&gt; &#123;\n\t\t\t\tconsole.log('生命周期mounted');\n      &#125;);\n      return &#123;\n        num,\n        fn\n      &#125;\n    &#125;\n  &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>下面例子代码都是在 <code>Typescript</code>  的环境下进行的，所以需要 <code>Typescript</code>  基础。</p>\n<h3 id=\"1-生命周期\"><a class=\"anchor\" href=\"#1-生命周期\">#</a> 1. 生命周期</h3>\n<p>通过在生命周期钩子前面加上 “on” 来访问组件的生命周期钩子。</p>\n<p>下表包含如何在 Option API 和 setup () 内部调用生命周期钩子</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Option API</th>\n<th style=\"text-align:center\">setup</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">beforeCreate</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">created</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beforeMount</td>\n<td style=\"text-align:center\">OnBeforeMount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mounted</td>\n<td style=\"text-align:center\">onMounted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beforeUpdate</td>\n<td style=\"text-align:center\">onBeforeUpdate</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updated</td>\n<td style=\"text-align:center\">onUpdated</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beforeUnmount</td>\n<td style=\"text-align:center\">onBeforeUnmount</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unmounted</td>\n<td style=\"text-align:center\">onUnmounted</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">activated</td>\n<td style=\"text-align:center\">onActivated</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deactivated</td>\n<td style=\"text-align:center\">onDeactivated</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>因为  <code>setup</code>  是在  <code>beforeCreate</code>  和  <code>created</code>  生命周期钩子前运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在  <code>setup</code>  函数中编写。</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div id=&quot;div&quot;&gt;123&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport &#123; defineComponent, onMounted &#125; from &quot;vue&quot;;\nexport default defineComponent(&#123;\n  setup() &#123;\n    console.log(&quot;setup&quot;);\n    onMounted((): void =&gt; &#123;\n      console.log(&quot;onMounted&quot;);\n      console.log(document.getElementById('div')?.innerHTML);\n    &#125;);\n  &#125;,\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"2-ref-reactive-torefs响应式和methods\"><a class=\"anchor\" href=\"#2-ref-reactive-torefs响应式和methods\">#</a> 2. ref、reactive、toRefs 响应式和 methods</h3>\n<p>Vue2.x 默认写在 data 的值，初始化的时候内部会完成值的数据的响应式（ <code>get</code> 、 <code>set</code>  绑定），但是 Vue3 要手动调用内置方法实现，那么接下来看看常用的实现数据响应式方法都有哪些。</p>\n<blockquote>\n<p>ref 不仅可以用在数据的响应式，还可以绑定 <code>DOM</code>  元素</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\t\n\t&lt;div&gt;\n\t\t&lt;div&gt;&#123;&#123; num &#125;&#125;&lt;/div&gt;\n    &lt;button @click=&quot;add1&quot;&gt;num++&lt;/button&gt;\n    &lt;p&gt;-------------------------------&lt;/p&gt;\n    &lt;div&gt;&#123;&#123; state.count &#125;&#125;&lt;/div&gt;\n    &lt;button @click=&quot;add2&quot;&gt;state.count++&lt;/button&gt;\n    &lt;p&gt;-------------------------------&lt;/p&gt;\n    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;\n    &lt;button @click=&quot;add3&quot;&gt;count++&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport &#123; defineComponent, ref, reactive, toRefs &#125; from &quot;vue&quot;;\nexport default defineComponent(&#123;\n  setup() &#123;\n    interface ObjItf &#123;\n      count: number;\n    &#125;\n\n    // ref声明响应式数据，用于声明基本数据类型\n    let num = ref&lt;number&gt;(1);\n\n    let obj = &#123;\n      count: 1,\n    &#125;;\n\n    // reactive声明响应式数据，用于声明引用数据类型\n    let state = reactive&lt;ObjItf&gt;(obj);\n\n    // toRefs解构响应式数据\n    let &#123; count &#125; = toRefs&lt;ObjItf&gt;(state);\n\n    const add1 = (): void =&gt; &#123;\n      num.value++; // 注意通过ref声明的变量，所以js要修改对应的值是要通过.value访问才可以，template模板不需要通过.value访问\n    &#125;;\n\n    const add2 = (): void =&gt; &#123;\n      state.count++; // 通过reactive声明的遍历，不需要通过.value访问值\n    &#125;;\n\n    const add3 = (): void =&gt; &#123;\n      count.value++; // 通过toRefs结构的值和ref声明的变量一样，需要通过.value访问其值\n    &#125;;\n\n    return &#123;\n      num,\n      state,\n      count,\n      add1,\n      add2,\n      add3\n    &#125;;\n  &#125;,\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<p><strong>注意：</strong></p>\n<ol>\n<li>reactive 可以传递基础数据类型和引用数据类型，基础数据类型不会被包装成响应式数据</li>\n<li>reactive 返回的响应式数据本质是 Proxy 对象，对象里面每一层都会被包装成 Proxy 对象</li>\n<li>reactive 返回的响应式数据和原始的数据会相互影响</li>\n<li>ref 可以传递基础数据类型和引用数据类型。如果是基础数据类型，那么这个基础数据值保存在返回的响应式数据的 <code>.value</code>  上；如果是对象，响应式数据在 <code>.value</code>  上。</li>\n<li>ref 本质是将一个数据变成一个对象，这个对象具有响应式特点</li>\n</ol>\n<p><strong>为什么需要 toRefs 和 toRef？</strong></p>\n<p>和 <code>ref</code>  不一样的是， <code>toRef</code>  和 <code>toRefs</code>  整两个方法，它们不创造响应式，而是延续响应式。创造响应式一般由 ref 和 reactive 来解决，而 toRef 和 toRefs 则把对象的数据进行分解和扩散，其这个对象针对的是<strong>响应式对象</strong> ( <code>reactive</code> ) 而非普通对象。</p>\n<h3 id=\"3-watch\"><a class=\"anchor\" href=\"#3-watch\">#</a> 3. watch</h3>\n<p>语法： <code>watch(监听源|[多个], (val, oldVal) =&gt; &#123;&#125;, &#123;immediate?: false, deep: false&#125;)</code></p>\n<p>watch 写法上支持一个或者多个监听源，这些监听源必须只能是 <code>getter/effect</code>  函数，ref 数据，reactive 对象，或者是数组类型</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n  \t&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;\n    &lt;button @click=&quot;add&quot;&gt;count++&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport &#123; defineComponent, reactive, toRefs, watch &#125; from &quot;vue&quot;;\nexport default defineComponent(&#123;\n  setup() &#123;\n    interface ObjItf &#123;\n      count: number;\n    &#125;\n\n    let obj = &#123;\n      count: 1,\n    &#125;;\n\n    // reactive声明响应式数据，用于声明引用数据类型\n    let state = reactive&lt;ObjItf&gt;(obj);\n\n    // toRefs解构响应式数据\n    let &#123; count &#125; = toRefs&lt;ObjItf&gt;(state);\n\n    const add = (): void =&gt; &#123;\n      count.value++;\n    &#125;;\n\n    watch(count, (newVal: number, oldVal: number): void =&gt; &#123;\n      console.log(newVal, oldVal);\n    &#125;);\n\n    return &#123;\n      count,\n      add,\n    &#125;;\n  &#125;,\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"4-watcheffect\"><a class=\"anchor\" href=\"#4-watcheffect\">#</a> 4. watchEffect</h3>\n<p>它立即执行传入的一个函数，同时<strong>响应式追踪其依赖</strong>，并在其依赖变更时重新运行该函数。</p>\n<pre><code class=\"language-vue\">&lt;script&gt;\n\tlet num = ref(0);\n  watchEffect(() =&gt; &#123;\n    console.log(num.value);\n  &#125;);\n  setTimeout(() =&gt; &#123;\n    num.value++;\n  &#125;, 1000);\n&lt;/script&gt;\n</code></pre>\n<p><strong>watch 和 watchEffect 的区别</strong></p>\n<ul>\n<li>两者都可以监听  <code>data</code>  属性变化；</li>\n<li><code>watch</code>  需要<strong>明确监听哪个属性</strong>；</li>\n<li>而  <code>watchEffect</code>  会根据其中的属性，<strong>自动监听</strong>其变化。</li>\n</ul>\n<h3 id=\"5-computed\"><a class=\"anchor\" href=\"#5-computed\">#</a> 5. computed</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;\n  &lt;button @click=&quot;state.count++&quot;&gt;state.count++&lt;/button&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport &#123; defineComponent, reactive, computed &#125; from &quot;vue&quot;;\nexport default defineComponent(&#123;\n  setup() &#123;\n    interface ObjItf &#123;\n      count: number;\n    &#125;\n\n    let obj = &#123;\n      count: 1,\n      arr: [1, 2, 3]\n    &#125;;\n\n    const state = reactive&lt;ObjItf&gt;(obj);\n\n    let count = computed((): number =&gt; &#123;\n      return state.count;\n    &#125;);\n\n    return &#123;\n      count,\n      state\n    &#125;;\n  &#125;,\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"6-组件\"><a class=\"anchor\" href=\"#6-组件\">#</a> 6. 组件</h3>\n<p><strong>全局组件：</strong></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-component-name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>局部组件：</strong></p>\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;&#123;&#123; aname &#125;&#125;&lt;/div&gt;\n&lt;/template&gt;\n\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport &#123; defineComponent, toRefs &#125; from &quot;vue&quot;;\nexport default defineComponent(&#123;\n  props: &#123;\n    aname: &#123;\n      type: String,\n      default: &quot;张三&quot;,\n    &#125;,\n  &#125;,\n  emits: [&quot;uname&quot;],\n  setup(props, &#123; emit &#125;) &#123;\n    let &#123; aname &#125; = toRefs(props);\n    const updateName = () =&gt; &#123;\n      emit('uname', 'a改变后的名字')\n    &#125;;\n    return &#123;\n      aname,\n      updateName,\n    &#125;;\n  &#125;,\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;mychild :aname=&quot;aname&quot; @uname=&quot;updateName&quot;&gt;&lt;/mychild&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport &#123; defineComponent, toRefs, ref &#125; from &quot;vue&quot;;\nimport mychild from './mychild.vue';\n  export default defineComponent(&#123;\n    components: &#123;\n      mychild\n    &#125;,\n    setup() &#123;\n      let aname = ref('李四');\n      const updateName = (p: string) =&gt; &#123;\n        aname.value = p;\n      &#125;\n      return &#123;\n        aname,\n        updateName\n      &#125;\n    &#125;\n  &#125;)\n&lt;/script&gt;\n</code></pre>\n<p><strong>setup 语法糖组件</strong></p>\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!--  --&gt;\n&lt;template&gt;\n  &lt;div&gt;&#123;&#123; aname &#125;&#125;&lt;/div&gt;\n  &lt;button @click=&quot;updateName&quot;&gt;修改姓名&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\n// setup语法糖下defineProps,defineEmits 不需要引入\nlet emit = defineEmits([&quot;updatename&quot;]);\nlet props = defineProps(&#123;\n  aname: &#123;\n    type: String,\n    default: &quot;李四&quot;,\n  &#125;,\n&#125;);\nconst updateName = (): void =&gt; &#123;\n    emit('updatename', '修改后的名字')\n&#125;;\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!--  --&gt;\n&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;mychild :aname=&quot;aname&quot; @updatename=&quot;updateName&quot;&gt;&lt;/mychild&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport &#123; ref &#125; from &quot;vue&quot;;\nimport mychild from &quot;./b.vue&quot;;\nlet aname = ref(&quot;张三&quot;);\nlet updateName = (name: string): void =&gt; &#123;\n  aname.value = name;\n&#125;;\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<h3 id=\"7-v-model\"><a class=\"anchor\" href=\"#7-v-model\">#</a> 7. v-model</h3>\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!--  --&gt;\n&lt;template&gt;\n  &lt;div&gt;&#123;&#123; name &#125;&#125;&#123;&#123; age &#125;&#125;&lt;/div&gt;\n  &lt;button @click=&quot;updateName&quot;&gt;修改姓名&lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nlet props = defineProps(&#123;\n  age: Number,\n  name: String,\n&#125;);\nlet emits = defineEmits([&quot;update:name&quot;, &quot;update:age&quot;]);\nlet updateName = () =&gt; &#123;\n  emits(&quot;update:age&quot;, 30);\n  emits(&quot;update:name&quot;, &quot;李四&quot;);\n&#125;;\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!--  --&gt;\n&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;mychild v-model:name=&quot;state.name&quot; v-model:age=&quot;state.age&quot;&gt;&lt;/mychild&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport &#123; reactive &#125; from &quot;vue&quot;;\nimport mychild from &quot;./b.vue&quot;;\nlet info = &#123;\n  name: '张三',\n  age: 20\n&#125;\nlet state = reactive(info);\n\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n</code></pre>\n<h3 id=\"8-插槽\"><a class=\"anchor\" href=\"#8-插槽\">#</a> 8. 插槽</h3>\n<blockquote>\n<p>子组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!--  --&gt;\n&lt;template&gt;\n  &lt;slot&gt;&lt;/slot&gt;\n  &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;\n  &lt;slot name=&quot;footer&quot; :user=&quot;state.user&quot; :d=&quot;state.d&quot;&gt;&lt;/slot&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport &#123; reactive &#125; from &quot;vue&quot;;\nlet state = reactive(&#123;\n  user: &#123; a: 1, b: 2 &#125;,\n  d: 1,\n&#125;);\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<blockquote>\n<p>父组件</p>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!--  --&gt;\n&lt;template&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;mychild&gt;\n    &lt;div&gt;匿名插槽&lt;/div&gt;\n    &lt;template #title&gt;\n      &lt;div&gt;具名插槽&lt;/div&gt;\n    &lt;/template&gt;\n    &lt;template #footer=&quot;scope&quot;&gt;\n      &lt;div&gt;作用域插槽&#123;&#123; scope.user &#125;&#125; &#123;&#123; scope.d &#125;&#125;&lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/mychild&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport mychild from &quot;./child.vue&quot;;\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<h3 id=\"9-await支持\"><a class=\"anchor\" href=\"#9-await支持\">#</a> 9. await 支持</h3>\n<p>不必再配合 async 就可以直接使用 await 了，这种情况下，组件的 setup 会自动变成 async setup 。</p>\n<pre><code class=\"language-vue\">&lt;script setup&gt;\n  const post = await fetch('/api').then(() =&gt; &#123;&#125;)\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"10-style-scoped\"><a class=\"anchor\" href=\"#10-style-scoped\">#</a> 10. style scoped</h3>\n<pre><code class=\"language-vue\">&lt;style scoped&gt;\n/* 修改第三方组件样式 */\n::v-deep(.foo) &#123;&#125;\n/* 简写 */\n:deep(.foo) &#123;&#125;\n\n/* 修改插槽内容样式 */\n::v-slotted(.foo) &#123;&#125;\n/* 简写 */\n:slotted(.foo) &#123;&#125;\n\n/* 修改全局样式 */\n::v-global(.foo) &#123;&#125;\n/* 简写 */\n:global(.foo) &#123;&#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"11-teleport\"><a class=\"anchor\" href=\"#11-teleport\">#</a> 11. teleport</h3>\n<p>这个组件可以把组件进行传送，to 属性就是要传送的位置目标，用 css 选择器</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n  &lt;teleport :to=&quot;target&quot;&gt;\n    &lt;p&gt;哈哈哈哈哈&lt;/p&gt;\n  &lt;/teleport&gt;\n  &lt;button @click=&quot;changeTarget&quot;&gt;点击切换&lt;/button&gt;\n  &lt;p&gt;-------------------------------&lt;/p&gt;\n  &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport &#123; ref &#125; from &quot;vue&quot;;\nlet target = ref&lt;string&gt;(&quot;.header&quot;);\nconst changeTarget = (): void =&gt; &#123;\n  target.value = &quot;.footer&quot;;\n&#125;;\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n\n</code></pre>\n",
            "tags": [
                "Vue3",
                "Vue3"
            ]
        },
        {
            "id": "https://gawainehzh.github.io/document/typescript/typescript/",
            "url": "https://gawainehzh.github.io/document/typescript/typescript/",
            "title": "Typescript",
            "date_published": "2022-04-28T02:45:19.070Z",
            "content_html": "<h1 id=\"typescript\"><a class=\"anchor\" href=\"#typescript\">#</a> typescript</h1>\n<h2 id=\"一-简介\"><a class=\"anchor\" href=\"#一-简介\">#</a> 一、简介</h2>\n<p>typescript 是 js 的超集，主要学习 ts 里面的原始类型、字面量类型、数组类型、函数类型、类类型、接口类型、类型别名、联合与交叉类型、枚举类型、泛型等类型元素，以及类型推断、类型断言、类型缩小、类型放大等特性。</p>\n<h2 id=\"二-原始类型\"><a class=\"anchor\" href=\"#二-原始类型\">#</a> 二、原始类型</h2>\n<p><strong>string，number，boolean，symbol，null，undefined</strong></p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一行增加这个是为了使文件里的变量不污染全局</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> bool<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> sy<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// symbol</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> undef<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> nul<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> vd<span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以把 undefined 类型赋值给 void 类型，但是反过来不行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 函数没有返回值，那么函数的返回值类型就是 void</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意：</strong> 1. <strong>void 只用在函数没有返回值的情形下。</strong> 2. **undefined 和 null 最大的价值主要体现在接口类型上，表示可缺省、未定义的属性；null 表示对象或者属性是空值。** 这个可以先有个印象，后面说到接口会讲 3. <strong>单纯声明 undefined 或者 null 类型的变量是无比鸡肋的，上面的例子只是说明原始类型</strong> 4. <strong>如果不写类型，typescript 是可以推断类型的，但注意 let、const 的区别</strong></p>\n<h2 id=\"三-非原始类型\"><a class=\"anchor\" href=\"#三-非原始类型\">#</a> 三、非原始类型</h2>\n<h3 id=\"1-小-object-大-object\"><a class=\"anchor\" href=\"#1-小-object-大-object\">#</a> <strong>1. 小 object, 大 Object, {}</strong></h3>\n<p>小 object：代表的是非原始类型的类型，也就是不能是 string，number，boolean，symbol，严格模式：多包括 null，undefined</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj1<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj2<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> obj3<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj4<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> obj5<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> obj6<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> obj7<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> obj8<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>大 Object ：代表所有拥有 toString、hasOwnProperty 方法的类型，所以所有<strong>原始类型、非原始类型</strong>都可以赋给 Object，严格模式下不包括 null，undefined。{} 空对象类型和大 Object 一样。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj1<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj2<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> obj6<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj3<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> obj4<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> obj5<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> obj7<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> obj8<span class=\"token operator\">:</span> Object <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意：</strong> 1. <strong>官方文档说可以使用小 object 代替大 Object，但是我们仍要明白大 Object 并不完全等价于小 object。</strong> 2. <strong>上面的例子看起来，大 Object 是小 object 的父类型，但并不是！！！真实的情况是大 Object 才是小 object 的子类型</strong></p>\n<h3 id=\"2-数组类型\"><a class=\"anchor\" href=\"#2-数组类型\">#</a> 2. 数组类型</h3>\n<p><strong>数组类型的定义：</strong></p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr1<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> arr2<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"3-字面量类型\"><a class=\"anchor\" href=\"#3-字面量类型\">#</a> 3. 字面量类型</h3>\n<ul>\n<li>字面量不仅可以表示值，还可以表示类型</li>\n</ul>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x3<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x3 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> x4<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x4 <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p><strong>注意：</strong></p>\n<ol>\n<li><strong>TypeScript 支持 3 种字面量类型：string 字面量类型、number 字面量类型、boolean 字面量类型</strong></li>\n</ol>\n<h3 id=\"4-联合类型\"><a class=\"anchor\" href=\"#4-联合类型\">#</a> 4. 联合类型</h3>\n<p>可以把 “|” 类比为 JavaScript 中的逻辑或 “||”，只不过前者表示可能的类型。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5-交叉类型\"><a class=\"anchor\" href=\"#5-交叉类型\">#</a> 5. 交叉类型</h3>\n<p>在 TypeScript 中，还存在一种类似逻辑与行为的类型 —— 交叉类型（Intersection Type），它可以把多个类型合并成一个类型，合并后的类型将拥有<strong>所有成员类型</strong>的特性。使用 “&amp;” 操作符来声明交叉类型 (并集)。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 思考这里有一个值满足 m 的类型要求吗？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> m<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> zs<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"6-联合-交叉组合\"><a class=\"anchor\" href=\"#6-联合-交叉组合\">#</a> 6. 联合、交叉组合</h3>\n<p>联合、交叉类型本身就可以直接组合使用，这就涉及 |、&amp; 操作符的优先级问题。联合操作符 | 的优先级低于交叉操作符 &amp;，同样，我们可以通过使用小括弧 () 来调整操作符的优先级，这个和 js 一样。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> m<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  id<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"四-anyunknown\"><a class=\"anchor\" href=\"#四-anyunknown\">#</a> 四、any&amp;&amp;unknown</h2>\n<ul>\n<li>\n<p>any 指的是一个任意类型，它是官方提供的一个选择性绕过静态类型检测的作弊方式。非常不建议使用；<strong>Any is Hell（Any 是地狱）</strong></p>\n</li>\n<li>\n<p>unknown 是 TypeScript 3.0 中添加的一个类型，它主要用来描述类型并不确定的变量。和 any 的区别就是会进行类型检测。</p>\n</li>\n</ul>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> unk<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  unk <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  unk <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 使用 unknown 后，typescript 会做类型检测</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>unk<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//any 会绕过类型检测，所以下面不会有问题提示</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> an1<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>an1<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 通过缩小类型可以通过类型检测</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> unk <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  unk<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意：</strong> 1. <strong>可以把任何类型的值赋值给 unknown，但是 unknown 类型的值只能赋值给 any 或者 unknown；</strong> 2. <strong>unknown 比 any 好的地方，还有一个就是它可以通过缩小类型的手段类确定类型</strong></p>\n<h2 id=\"五-never-类型\"><a class=\"anchor\" href=\"#五-never-类型\">#</a> 五、never 类型</h2>\n<ul>\n<li>never 表示永远不会发生值的类型</li>\n</ul>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throwErrFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意：</strong> 1. ** 如果函数里是死循环，返回值类型也是 never ** 2. <strong>never 是所有类型的子类型</strong></p>\n<h2 id=\"六-接口interface\"><a class=\"anchor\" href=\"#六-接口interface\">#</a> 六、接口（interface）</h2>\n<p>TypeScript 不仅能帮助前端改变思维方式，还能强化面向接口编程的思维和能力，而这正是得益于 Interface 接口类型。</p>\n<h3 id=\"1-定义变量和函数的类型\"><a class=\"anchor\" href=\"#1-定义变量和函数的类型\">#</a> 1. 定义变量和函数的类型</h3>\n<p>使用接口定义变量和函数参数的类型</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 定义变量的类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> zhangsan<span class=\"token operator\">:</span> PersonInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 定义数组的类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ArrayNumber</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">[</span>idx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> arr1<span class=\"token operator\">:</span> ArrayNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 定义函数的类型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonFn</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> PersonInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">let</span> Person1<span class=\"token operator\">:</span> PersonFn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> PersonInfo<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意：</strong></p>\n<ol>\n<li><strong>很少使用接口类型来定义函数的类型，更多使用内联类型或类型别名配合箭头函数语法来定义函数类型；</strong></li>\n</ol>\n<h3 id=\"2-继承\"><a class=\"anchor\" href=\"#2-继承\">#</a> 2. 继承</h3>\n<p>多个不同接口之间是可以实现继承的，但是如果继承的接口 PersonInfo 和被继承的接口 NameInfo 有相同的属性，并且类型不兼容，那么就会报错。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NameInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AgeInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">NameInfo</span><span class=\"token punctuation\">,</span> AgeInfo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> zs<span class=\"token operator\">:</span> PersonInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token number\">177</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>多个不同的接口可以实现继承，组合成一个新的接口，那么如果出现多个相同名字的接口会怎么样？</p>\n<h3 id=\"3-多个相同接口\"><a class=\"anchor\" href=\"#3-多个相同接口\">#</a> 3. 多个相同接口</h3>\n<p>多个相同名字的接口，会进行合并，得到一个新的接口；这个接口的特性一般用在扩展第三方库的接口类型。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> zs<span class=\"token operator\">:</span> PersonInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token number\">177</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"4-缺省和只读特性\"><a class=\"anchor\" href=\"#4-缺省和只读特性\">#</a> 4. 缺省和只读特性</h3>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缺省</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">readonly</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只读</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"七-类型别名type\"><a class=\"anchor\" href=\"#七-类型别名type\">#</a> 七、类型别名（type）</h2>\n<p>接口类型的一个作用是将内联类型抽离出来，从而实现类型可复用。其实，我们也可以使用类型别名接收抽离出来的内联类型实现复用。格式： <code>type</code>  别名名称 = 类型定义。</p>\n<h3 id=\"1-基础使用\"><a class=\"anchor\" href=\"#1-基础使用\">#</a> 1. 基础使用</h3>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> zs<span class=\"token operator\">:</span> PersonInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-特定使用场景\"><a class=\"anchor\" href=\"#2-特定使用场景\">#</a> 2. 特定使用场景</h3>\n<p>大家可能觉得这个和接口没多大区别，这不是重复了吗？其实不是，类型别名可以针对接口没法覆盖的场景，例如组合类型、交叉类型等；</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 组合类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NumAndString</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 交叉类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">SectionType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 3. 提取接口属性类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonHeight</span> <span class=\"token operator\">=</span> PersonInfo<span class=\"token punctuation\">[</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">let</span> zs<span class=\"token operator\">:</span> SectionType <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  height<span class=\"token operator\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 黑魔法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">BorderColor</span> <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">\"black\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">\"red\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">\"green\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">\"yellow\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token string\">\"blue\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//vscode 提示字面类型都被保留</span></pre></td></tr></table></figure><h3 id=\"3-interface-与-type-的区别\"><a class=\"anchor\" href=\"#3-interface-与-type-的区别\">#</a> 3. Interface 与 Type 的区别</h3>\n<p>实际上，在大多数的情况下使用接口类型和类型别名的效果等价，但是在某些特定的场景下这两者还是存在很大区别。</p>\n<ol>\n<li><strong>重复定义的接口类型，它的属性会叠加，这个特性使得我们可以极其方便地对全局变量、第三方库的类型做扩展</strong></li>\n<li><strong>如果我们重复定义类型别名，那么就会报错</strong></li>\n</ol>\n<h2 id=\"七-函数类型\"><a class=\"anchor\" href=\"#七-函数类型\">#</a> 七、函数类型</h2>\n<h3 id=\"1-基础定义\"><a class=\"anchor\" href=\"#1-基础定义\">#</a> 1. 基础定义</h3>\n<p>显式指定函数参数和返回值的类型</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或者用 type 来声明函数类型</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">addFnType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> addFn<span class=\"token operator\">:</span> <span class=\"token function-variable function\">addFnType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-函数参数类型\"><a class=\"anchor\" href=\"#2-函数参数类型\">#</a> 2. 函数参数类型</h3>\n<p>参数一般有：可选参数、默认参数、剩余参数；</p>\n<h4 id=\"1-可选参数\"><a class=\"anchor\" href=\"#1-可选参数\">#</a> 1. 可选参数</h4>\n<p>在类型标注的 <code>:</code>  前添加 <code>?</code>  表示 log 函数的参数 x 就是可缺省的；</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可缺省是不是相当于 msg 参数的类型就是和 <code>string | undefined</code>  等价呢？这个当然不是， <code>string | undefined</code>  的意思是这两个类型中的一种，而可缺省是不传的意思。</p>\n<h4 id=\"2-默认参数\"><a class=\"anchor\" href=\"#2-默认参数\">#</a> 2. 默认参数</h4>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addFn1</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>函数的默认参数类型必须是参数类型的子类型</strong></p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">log3</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里 x 参数的类型就是联合类型 <code>number | string</code> ，函数默认参数的类型就是联合类型的子类型</p>\n<h4 id=\"3-剩余参数\"><a class=\"anchor\" href=\"#3-剩余参数\">#</a> 3. 剩余参数</h4>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 6</span></pre></td></tr></table></figure><h4 id=\"4-this\"><a class=\"anchor\" href=\"#4-this\">#</a> 4. this</h4>\n<p>函数中的 this 问题，一直都是 javascript 最令人头疼的问题，因为 this 的指向只有函数调用的时候才能确定。还有一些可以改变 this 指向的方法（apply，call，bind）。</p>\n<p>但是在 Typescript 中，必须要明确的指定 this 的类型（严格模式下）。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">objType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function-variable function\">person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span> myname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> Window <span class=\"token operator\">|</span> objType<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myname <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>window<span class=\"token punctuation\">.</span>person <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"window name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> objType <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  person<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  myname<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"obj name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>单单是上面的代码是有问题的，我们还需要创建一个类型声明文件<strong> global.d.ts</strong>，为 window 对象上扩展两个属性 person、myname；</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  myname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>定义对象的函数属性时，只要实际调用中 this 的指向与指定的 this 指向不同，TypeScript 就能发现 this 指向的错误</strong></p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ObjType2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> ObjType2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> obj2<span class=\"token operator\">:</span> ObjType2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"obj2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj2<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> t11 <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">t11</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意：</strong> 1. <strong>显式声明函数的返回值类型为 undfined，则会出现错误提示，如果没有返回值，我们用 void 表示；</strong> 2. <strong>注意：显式注解函数中的 this 类型，它表面上占据了第一个形参的位置，但并不意味着函数真的多了一个参数，因为 TypeScript 转译为 JavaScript 后，“伪形参” this 会被抹掉，这算是 TypeScript 为数不多的特有语法。</strong></p>\n<h2 id=\"八-枚举\"><a class=\"anchor\" href=\"#八-枚举\">#</a> 八、枚举</h2>\n<h3 id=\"1-数字枚举和字符串枚举\"><a class=\"anchor\" href=\"#1-数字枚举和字符串枚举\">#</a> 1. 数字枚举和字符串枚举</h3>\n<p>枚举的作用在于定义被命名的常量集合，一个默认从 0 开始递增的数字集合，称之为数字枚举。也可以指定值，这里可以指定的值可以是数字或者字符串。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Days <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Sunday <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Monday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Tuesday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Wednesday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Thursday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Friday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Saturday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> day <span class=\"token operator\">=</span> Days<span class=\"token punctuation\">.</span>Sunday<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"九-泛型\"><a class=\"anchor\" href=\"#九-泛型\">#</a> 九、泛型</h2>\n<h3 id=\"1-什么是泛型\"><a class=\"anchor\" href=\"#1-什么是泛型\">#</a> 1. 什么是泛型？</h3>\n<p>泛型指的是<strong>类型参数化</strong>，即将原来某种具体的类型进行参数化。设计泛型的目的在于有效约束类型成员之间的关系，比如函数参数和返回值、类或者接口成员和方法之间的关系。</p>\n<h3 id=\"2-泛型类型参数\"><a class=\"anchor\" href=\"#2-泛型类型参数\">#</a> 2. 泛型类型参数</h3>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getValue1</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getValue2</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> g1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> g2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> g3<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span> <span class=\"token operator\">=</span> <span class=\"token function\">getValue2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getValue3</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">let</span> g4<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">getValue3</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> g5<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">getValue3</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"3-泛型类型\"><a class=\"anchor\" href=\"#3-泛型类型\">#</a> 3. 泛型类型</h3>\n<p>前面我们使用过 Array &lt;类型&gt; 来定义数组的类型，这里的 Array 也是一种类型。</p>\n<p>在 TypeScript 中，类型本身就可以被定义为拥有不明确的类型参数的泛型，并且可以接收明确类型作为入参，从而衍生出更具体的类型。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义数组类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> arr1<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 类型别名</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">typeFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> fntype<span class=\"token operator\">:</span> typeFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> fn1<span class=\"token operator\">:</span> typeFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 定义接口类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TypeItf<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">let</span> t1<span class=\"token operator\">:</span> TypeItf<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">let</span> t2<span class=\"token operator\">:</span> TypeItf<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"4-泛型约束\"><a class=\"anchor\" href=\"#4-泛型约束\">#</a> 4. 泛型约束</h3>\n<p>把泛型入参限定在一个相对更明确的集合内，以便对入参进行约束。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TypeItf<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> t1<span class=\"token operator\">:</span> TypeItf<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> t2<span class=\"token operator\">:</span> TypeItf<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"十-class类\"><a class=\"anchor\" href=\"#十-class类\">#</a> 十、class（类）</h2>\n<p>面向对象实践 OOP 编程思想，在实际工作中，都是极其有用的抽象、封装利器。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> song<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>song<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Song\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"1-继承\"><a class=\"anchor\" href=\"#1-继承\">#</a> 1. 继承</h3>\n<p>使用 extends 关键字实现继承</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Male</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2-修饰符public-private-protected-readonly\"><a class=\"anchor\" href=\"#2-修饰符public-private-protected-readonly\">#</a> 2. 修饰符（public、private、protected、readonly）</h3>\n<p>在 TypeScript 中就支持 3 种访问修饰符，分别是 public、private、protected。通过这三个修饰符做到控制属性和方法的访问。</p>\n<ul>\n<li>public：基类、子类、类外部都可以访问；</li>\n<li>protected：基类、子类可以访问，类外部不可以访问；</li>\n<li>private：基类可以访问，子类、类外部不可以访问；</li>\n<li>readonly：只读修饰符</li>\n</ul>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">protected</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">private</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"180\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">protected</span> <span class=\"token function\">getPersonInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 基类里面三个修饰符都可以访问</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Male</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子类只能访问 public、protected 修饰符的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Male</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类外部只能访问 public 修饰的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>m<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//name 属性使用只读修饰符，所以不能对 name 进行赋值修改操作</span></pre></td></tr></table></figure><h3 id=\"3-静态属性\"><a class=\"anchor\" href=\"#3-静态属性\">#</a> 3. 静态属性</h3>\n<p>基于静态属性的特性，往往会把与类相关的常量、不依赖实例 this 上下文的属性和方法定义为静态属性，从而避免数据冗余，进而提升运行性能。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">static</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"个人信息\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Person<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"4-抽象类和接口\"><a class=\"anchor\" href=\"#4-抽象类和接口\">#</a> 4. 抽象类和接口</h3>\n<p>抽象类，它是一种不能被实例化仅能被子类继承的特殊类。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">abstract</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">abstract</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">extendsFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扩展方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Male</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接口 interface 也可以约束类的实现，使用接口与使用抽象类相比，区别在于接口<strong>只能定义类成员的类型</strong>。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Male</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-类的类型\"><a class=\"anchor\" href=\"#5-类的类型\">#</a> 5. 类的类型</h3>\n<p>在声明类的时候，其实也同时声明了一个特殊的类型（确切地讲是一个接口类型），这个类型的名字就是类名，表示类实例的类型。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Male</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> Male<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> m1<span class=\"token operator\">:</span> Male <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Male</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> m2<span class=\"token operator\">:</span> Male <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> Male<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>m2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> fn <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错，this 指向并不是 Male 对象</span></pre></td></tr></table></figure><h2 id=\"十一-工具类型\"><a class=\"anchor\" href=\"#十一-工具类型\">#</a> 十一、工具类型</h2>\n<p>打造自己的工具类型，这个时候需要用到一些物料</p>\n<h3 id=\"1-extends\"><a class=\"anchor\" href=\"#1-extends\">#</a> 1. extends</h3>\n<p>extends 关键字判断泛型参数 P 是否是 string 或者是 number 其中的一种，最终类型的确定由三元运算的结果决定。</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">TypeFn<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> m<span class=\"token operator\">:</span> TypeFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> m1<span class=\"token operator\">:</span> TypeFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> m2<span class=\"token operator\">:</span> TypeFn<span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-类型推断-infer\"><a class=\"anchor\" href=\"#2-类型推断-infer\">#</a> 2. 类型推断 infer</h3>\n<p>类型推断 infer 相当于声明一个变量接收传入的类型</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">ObjType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">:</span> ObjType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> ObjType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"3-keyof\"><a class=\"anchor\" href=\"#3-keyof\">#</a> 3. keyof</h3>\n<p>Keyof 提取对象属性名、索引名、索引签名的类型；</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NumAndStr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">TypeKey</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> NumAndStr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// number | 'name' | 'age'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> t<span class=\"token operator\">:</span> TypeKey <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"4-in\"><a class=\"anchor\" href=\"#4-in\">#</a> 4. in</h3>\n<p>in 是映射类型</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NumAndStr</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">TargetType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> NumAndStr<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span> TargetType <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意：</strong></p>\n<ol>\n<li><strong>我们只能在类型别名定义中使用 in，如果在接口 (interface) 中使用，则会提示一个错误</strong></li>\n<li><strong>in 和 keyof 也只能在类型别名定义中组合使用</strong></li>\n</ol>\n<h3 id=\"5-typeof\"><a class=\"anchor\" href=\"#5-typeof\">#</a> 5. typeof</h3>\n<p>typeof 的主要用途是在类型上下文中获取<strong>变量或者属性</strong>的类型</p>\n<figure class=\"highlight tsx\"><figcaption data-lang=\"React TSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 推断变量的类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> strA <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">KeyOfType</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> strA<span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 反推出对象的类型作为新的类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> person<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Typescript",
                "Typescript"
            ]
        }
    ]
}